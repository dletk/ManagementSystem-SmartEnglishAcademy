package Model;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * The model manager class to control all the logic of working with models and database
 * in the program.
 */
public class ModelManager {
    private DatabaseManager databaseManager;
    private ArrayList<User> users;
    private HashMap<User, ArrayList<Shift>> shifts;

    public ModelManager() {
        this.databaseManager = new DatabaseManager();
        this.users = databaseManager.getUsers();
        this.shifts = databaseManager.getShifts();
    }

    public ArrayList<User> getUsers() {
        return this.users;
    }

    public HashMap<User, ArrayList<Shift>> getShifts() {
        return this.shifts;
    }

    /**
     * Method to update the data of a user
     * @param user the user to update the data
     * @param fieldsAndData the data to update in the database
     * @return true if data is updated
     */
    public boolean updateUser(User user, HashMap<String, String> fieldsAndData) {
        String userID = Integer.toString(user.getUserID());

//        Get users and shifts from the new query after updating
        if (databaseManager.updateUser(userID, fieldsAndData)) {
            users = databaseManager.getUsers();
            shifts = databaseManager.getShifts();
        }
        return true;
    }

    /**
     * The method to add a user to the database thorough the Model manager
     * @param username
     * @param phone
     * @param firstname
     * @param lastname
     * @param email
     * @param role
     * @param password
     */
    public void addUser(String username, long phone, String firstname, String lastname, String email, String role, String password) {
//        TODO: User id is generated by the length of total users in database + 1, this is not safe if some users get deleted
        int userID = users.size() + 1;

        databaseManager.addUser(userID, phone, username, firstname, lastname, email, role, password);

//        After added user, get the users list from database again
        users = databaseManager.getUsers();
    }

    /**
     * Method to begin the clock in process for this user
     * @param user
     * @return true if the clock in process is done successfully
     */
    public boolean clockIn(User user) {
//        Get the most recent shift of this user
        Shift lastShift = shifts.get(user).get(0);

//        Check if this shift is complete (with ending time)
        if (lastShift.getEndingTime().isEmpty()) {
//            The last shift is not clocked out
            return false;
        } else {
//            The last shift is clocked out. Good to clock in.
//            TODO: create updateShift in database manager class
            databaseManager.updateShift();
        }
    }

    /**
     * Method to add a new shift for a user after checking for validation
     * @param userID the id of the user
     */
    private void addShift(int userID) {
        databaseManager.addShift(userID);

//        Update the shifts list from database again
        shifts = databaseManager.getShifts();
    }
}
